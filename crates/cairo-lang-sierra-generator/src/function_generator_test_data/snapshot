//! > Test usage of original array after snapshot.

//! > test_runner_name
test_function_generator

//! > function
fn foo(ref arr: Array<felt252>) {
    arr.append(5);
    arr.span();
    revoke_ap();
    arr.append(6);
}

//! > function_name
foo

//! > module_code
use array::ArrayTrait;

// Revokes ap since this function is recursive.
fn revoke_ap() -> felt252 {
    revoke_ap()
}

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > sierra_gen_diagnostics

//! > sierra_code
label0:
alloc_local<Array<felt252>>() -> ([4])
finalize_locals() -> ()
disable_ap_tracking() -> ()
felt252_const<5>() -> ([5])
store_temp<felt252>([5]) -> ([5])
array_append<felt252>([2], [5]) -> ([3])
store_local<Array<felt252>>([4], [3]) -> ([3])
snapshot_take<Array<felt252>>([3]) -> ([6], [7])
struct_construct<core::array::Span::<core::felt252>>([7]) -> ([8])
drop<core::array::Span::<core::felt252>>([8]) -> ()
store_temp<RangeCheck>([0]) -> ([12])
store_temp<GasBuiltin>([1]) -> ([13])
function_call<user@test::revoke_ap>([12], [13]) -> ([9], [10], [11])
enum_match<core::PanicResult::<(core::felt252,)>>([11]) { fallthrough([14]) label1([15]) }
branch_align() -> ()
struct_deconstruct<Tuple<felt252>>([14]) -> ([16])
drop<felt252>([16]) -> ()
felt252_const<6>() -> ([17])
store_temp<felt252>([17]) -> ([17])
array_append<felt252>([6], [17]) -> ([18])
struct_construct<Unit>() -> ([19])
struct_construct<Tuple<Array<felt252>, Unit>>([18], [19]) -> ([20])
enum_init<core::PanicResult::<(core::array::Array::<core::felt252>, ())>, 0>([20]) -> ([21])
store_temp<RangeCheck>([9]) -> ([22])
store_temp<GasBuiltin>([10]) -> ([23])
store_temp<core::PanicResult::<(core::array::Array::<core::felt252>, ())>>([21]) -> ([24])
return([22], [23], [24])
label1:
branch_align() -> ()
drop<Array<felt252>>([6]) -> ()
enum_init<core::PanicResult::<(core::array::Array::<core::felt252>, ())>, 1>([15]) -> ([25])
store_temp<RangeCheck>([9]) -> ([26])
store_temp<GasBuiltin>([10]) -> ([27])
store_temp<core::PanicResult::<(core::array::Array::<core::felt252>, ())>>([25]) -> ([28])
return([26], [27], [28])
label2:
